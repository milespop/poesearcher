name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  pull-requests: write
  actions: read
  packages: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Create Release Pull Request
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called version which runs `changeset version` and updates the `package.json` version
          version: npm run changeset:version
          # We're not publishing to npm, just using changesets for versioning
          publish: echo "Skipping npm publish - Chrome extension only"
          commit: "chore: release packages"
          createGithubReleases: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update PR Title with Version
        if: steps.changesets.outputs.hasChangesets == 'true'
        run: |
          # Get the new version from package.json after changesets processed it
          NEW_VERSION=$(node -p "require('./package.json').version")

          # Get the PR number from the changesets output
          PR_NUMBER=$(gh pr list --head changeset-release/main --json number --jq '.[0].number')

          if [ ! -z "$PR_NUMBER" ]; then
            gh pr edit $PR_NUMBER --title "Release: v$NEW_VERSION"
            echo "Updated PR #$PR_NUMBER title to: Release: v$NEW_VERSION"
          else
            echo "No release PR found to update"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Check if this push was a merge of a changeset-release branch
      - name: Check for Release
        id: check_release
        run: |
          # Check if the most recent commit message contains "chore: release packages"
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$LAST_COMMIT_MSG" == *"chore: release packages"* ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "This is a release commit"
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "This is not a release commit"
          fi

      - name: Build Extension for Release
        if: steps.check_release.outputs.is_release == 'true'
        run: npm run changeset:release

      - name: Verify Build Output
        if: steps.check_release.outputs.is_release == 'true'
        run: |
          echo "Checking for poesearcher.zip..."
          ls -la *.zip || echo "No zip files in root"
          if [ -f "poesearcher.zip" ]; then
            echo "✅ poesearcher.zip exists"
            echo "File size: $(ls -lh poesearcher.zip | awk '{print $5}')"
          else
            echo "❌ poesearcher.zip not found!"
            exit 1
          fi

      - name: Get Version for Tag
        if: steps.check_release.outputs.is_release == 'true'
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Create Git Tag
        if: steps.check_release.outputs.is_release == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Check if tag already exists
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.get_version.outputs.version }} already exists, skipping tag creation"
          else
            git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
            git push origin "v${{ steps.get_version.outputs.version }}"
            echo "Created and pushed tag v${{ steps.get_version.outputs.version }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Changelog Entry
        if: steps.check_release.outputs.is_release == 'true'
        id: changelog
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          # Extract changelog entry for current version
          CHANGELOG_ENTRY=$(sed -n "/## $VERSION/,/## [0-9]/p" CHANGELOG.md | sed '$d' | tail -n +2)

          # If no next version found, get everything after current version
          if [ -z "$CHANGELOG_ENTRY" ]; then
            CHANGELOG_ENTRY=$(sed -n "/## $VERSION/,\$p" CHANGELOG.md | tail -n +2)
          fi

          echo "CHANGELOG_ENTRY<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_ENTRY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Delete Existing Release if Present
        if: steps.check_release.outputs.is_release == 'true'
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          if gh release view "v$VERSION" >/dev/null 2>&1; then
            echo "Deleting existing release v$VERSION"
            gh release delete "v$VERSION" -y --cleanup-tag
          else
            echo "No existing release v$VERSION found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: steps.check_release.outputs.is_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: v${{ steps.get_version.outputs.version }}
          body: |
            ## Changes

            ${{ steps.changelog.outputs.CHANGELOG_ENTRY }}

            ## Installation

            Download the `poesearcher.zip` file below and load it as an unpacked extension in Chrome:

            1. Download `poesearcher.zip` from the assets below
            2. Extract the zip file to a folder
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode" in the top right
            5. Click "Load unpacked" and select the extracted folder
            6. The extension will be ready to use on [Path of Exile trade pages](https://www.pathofexile.com/trade2/search/poe2/)

            ## Compatibility

            - Chrome, Brave, Edge, and other Chromium-based browsers
            - Path of Exile 2 trade website
          files: |
            ./poesearcher.zip
          fail_on_unmatched_files: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}