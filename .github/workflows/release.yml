name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Create Release Pull Request or Publish to GitHub
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called version which runs `changeset version` and updates the `package.json` version
          version: npm run changeset:version
          # Build extension but don't publish to npm - this is a Chrome extension
          publish: echo "Skipping npm publish - this is a Chrome extension"
          commit: "chore: release packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update PR Title with Version
        if: steps.changesets.outputs.hasChangesets == 'true'
        run: |
          # Get the new version from package.json after changesets processed it
          NEW_VERSION=$(node -p "require('./package.json').version")

          # Get the PR number from the changesets output
          PR_NUMBER=$(gh pr list --head changeset-release/main --json number --jq '.[0].number')

          if [ ! -z "$PR_NUMBER" ]; then
            gh pr edit $PR_NUMBER --title "Release: v$NEW_VERSION"
            echo "Updated PR #$PR_NUMBER title to: Release: v$NEW_VERSION"
          else
            echo "No release PR found to update"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Extension for Release
        if: steps.changesets.outputs.published == 'true'
        run: npm run changeset:release

      - name: Create Git Tag
        if: steps.changesets.outputs.published == 'true'
        run: |
          VERSION=$(node -p "require('./package.json').version")
          git tag "v$VERSION"
          git push origin "v$VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Changelog Entry
        if: steps.changesets.outputs.published == 'true'
        id: changelog
        run: |
          VERSION=$(node -p "require('./package.json').version")
          # Extract changelog entry for current version
          CHANGELOG_ENTRY=$(sed -n "/## $VERSION/,/## /p" CHANGELOG.md | sed '$d' | tail -n +2)
          echo "CHANGELOG_ENTRY<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_ENTRY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.changesets.outputs.published == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.changelog.outputs.VERSION }}
          name: Release v${{ steps.changelog.outputs.VERSION }}
          body: |
            ## Changes

            ${{ steps.changelog.outputs.CHANGELOG_ENTRY }}

            ## Installation

            Download the `poesearcher.zip` file and load it as an unpacked extension in Chrome:
            1. Open Chrome and go to `chrome://extensions/`
            2. Enable "Developer mode"
            3. Click "Load unpacked"
            4. Extract and select the extension folder

            The extension will be ready to use on Path of Exile trade pages.
          files: |
            poesearcher.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}